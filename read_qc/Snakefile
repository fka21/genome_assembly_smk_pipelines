configfile: "bin/config/config.yml"

# Define sample names from the file structure
sample = glob_wildcards("data/reads/{fname}.fa").fname


rule all:
    input:
        expand("genomescope_report/{sample}", sample=sample),
        expand("kmer_histograms/{sample}_hetkmers.dump", sample=sample),
        expand("kmer_histograms/{sample}_summary_table.tsv", sample=sample),
        expand("kat2_report/{sample}.mx.png", sample=sample),
        expand("kraken2_report/krona_report/{sample}.html", sample=sample),
        expand("nanoplot_report/{sample}", sample=sample)

rule fasta2fastq:
    input:
        reads="data/reads/{sample}.fa"
    output:
        reads="data/reads/{sample}.fq"
    conda:
        "bin/config/kmer.yml"
    params: "-F '#'"
    shell:
        """
        seqtk seq {params} {input.reads} > {output.reads}
        """

rule kmer_counter:
    input:
        reads="data/reads/{sample}.fq"
    output:
        output_dir=directory("kmer_counter/{sample}")
    log:
        "logs/kmer_counter_{sample}.log"
    conda:
        "bin/config/kmer.yml"
    threads: 40
    params:
        args="-k27 -m128",
        tmp=temp("tmpdir_kmer")
    shell:
        """
        mkdir -p {output.output_dir} && cd {output.output_dir}
        mkdir -p {params.tmp}
        kmc {params.args} -t{threads} ../../{input.reads} {wildcards.sample} {params.tmp}
        """

rule kmer2hist:
    input:
        "kmer_counter/{sample}"
    output:
        histo="kmer_histograms/{sample}.hist"
    conda:
        "bin/config/kmer.yml"
    params:
        operation1="transform",
        operation2="histogram",
        maxcov="-cx10000"
    shell:
        """
        kmc_tools {params.operation1} {input}/{sample} {params.operation2} {output.histo} {params.maxcov}
        """

rule smudgeplot:
    input:
        hist="kmer_histograms/{sample}.hist",
        kmerdb="kmer_counter/{sample}"
    output:
        dump="kmer_histograms/{sample}_hetkmers.dump",
        sumtbl="kmer_histograms/{sample}_summary_table.tsv"
    conda:
        "bin/config/kmer.yml"
    params:
        kmer="-k 27",
        output_pattern="{sample}",
        output_dir="kmer_histograms/{sample}"
    shell:
        """
        L=$(smudgeplot.py cutoff {input.hist} L)
        U=$(smudgeplot.py cutoff {input.hist} U)
        kmc_tools transform {input.kmerdb}/{sample} -ci"$L" -cx"$U" dump -s {output.dump}
        smudgeplot.py hetkmers -o {output.dump} < {output.dump}
        smudgeplot.py plot {params.kmer} -o {params.output_dir} {output.dump}_coverages.tsv
        """

rule genomescope:
    input:
        histo="kmer_histograms/{sample}.hist"
    output:
        directory("genomescope_report/{sample}")
    log:
        "logs/genomescope_{sample}.log"
    conda:
        "bin/config/kmer.yml"
    shell:
        """
        genomescope.R -i {input.histo} -o {output}
        """

rule kat2:
    input:
        reads="data/reads/{sample}.fa"
    output:
        "kat2_report/{sample}.mx.png"
    log:
        "logs/kat2_{sample}.log"
    conda:
        "bin/config/kat2.yml"
    threads: 40
    shell:
        """
        kat gcp -t {threads} -o kat2_report/{wildcards.sample} {input}
        """



rule contamination_evaluation:
    input:
        reads="data/reads/{sample}.fa"
    output:
        kraken2="kraken2_report/{sample}.output.txt",
        kraken2_report="kraken2_report/{sample}.report.txt",
        krona="kraken2_report/{sample}.krona_input.txt"
    log:
        "logs/kraken2_{sample}.log"
    conda:
        "bin/config/kraken2.yml"
    params:
        db=config['db']
    threads: 40
    shell:
        """
        kraken2 --db {params.db} --threads {threads} --output {output.kraken2} --report {output.kraken2_report} {input}
        cut -f 2,3 {output.kraken2} > {output.krona}
        """

rule contamination_visualisation:
    input:
        "kraken2_report/{sample}.krona_input.txt"
    output:
        "kraken2_report/krona_report/{sample}.html"
    log:
        "logs/krona_{sample}.log"
    conda:
        "bin/config/kraken2.yml"
    shell:
        """
        ktUpdateTaxonomy.sh
        ktImportTaxonomy -o {output} {input}
        """

rule nanoplot:
    input:
        reads="data/reads/{sample}.fa"
    output:
        outdir=directory("nanoplot_report/{sample}")
    conda:
        "bin/config/nanoplot.yml"
    threads: 40
    params:
        "--dpi 300 --format 'pdf'"
    shell:
        """
        NanoPlot --fasta {input} --outdir {output.outdir} --threads {threads}
        """
